import { startApiServer } from "./src/api/index";
import { updateSchemaWithRetry, validateSchema } from "./src/lib/airtable/schema-updater";

const refreshInterval = parseInt(process.env.REFRESH_INTERVAL || "5400");
const apiPort = parseInt(process.env.PORT || "3000");

console.log("üöÄ D√©marrage du service Aircache");

// 0. G√©n√©ration du sch√©ma Airtable au d√©marrage
console.log("üìã G√©n√©ration du sch√©ma Airtable au d√©marrage...");
const schemaGenerated = await updateSchemaWithRetry(2);
if (!schemaGenerated) {
  console.warn("‚ö†Ô∏è √âchec g√©n√©ration sch√©ma, v√©rification du sch√©ma existant...");
  const schemaExists = await validateSchema();
  if (!schemaExists) {
    console.error("‚ùå Aucun sch√©ma Airtable valide trouv√©. V√©rifiez vos variables d'environnement AIRTABLE_API_KEY et AIRTABLE_BASE_ID");
    process.exit(1);
  }
} else {
  console.log("‚úÖ Sch√©ma Airtable g√©n√©r√© avec succ√®s au d√©marrage");
}

// 1. D√©marrage du serveur API
await startApiServer(apiPort);

// 2. D√©marrage du worker de cache
console.log("üîÑ D√©marrage du worker de cache...");

const worker = new Worker("src/worker/index.ts");

worker.onmessage = (e) => {
  console.log("üì® Worker:", e.data);
};

// Premier refresh au d√©marrage
worker.postMessage({ type: "refresh:start" });

// Refresh p√©riodique
setInterval(() => {
  worker.postMessage({ type: "refresh:start" });
}, refreshInterval * 1000);

console.log(`‚è∞ Refresh programm√© toutes les ${refreshInterval} secondes`);
console.log(`‚úÖ Service complet d√©marr√© !`);

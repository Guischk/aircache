/**
 * Serveur principal utilisant SQLite au lieu de Redis
 * Architecture simplifiée avec storage local
 */

import { startSQLiteApiServer } from "./src/api/sqlite-server";

const refreshInterval = parseInt(process.env.REFRESH_INTERVAL || "86400"); // 24h par défaut
const apiPort = parseInt(process.env.PORT || "3000");

console.log("🚀 Démarrage du service Aircache (SQLite)");

// 1. Démarrage du worker SQLite
console.log("🔄 Démarrage du worker SQLite...");

const worker = new Worker("src/worker/sqlite-worker.ts");

worker.onmessage = (e) => {
  if (e.data?.type === "refresh:done") {
    console.log("✅ Refresh terminé:", e.data.stats);
  } else if (e.data?.type === "refresh:error") {
    console.error("❌ Erreur refresh:", e.data.error);
  } else {
    console.log("📨 Worker SQLite:", e.data);
  }
};

worker.onerror = (error) => {
  console.error("❌ Erreur Worker SQLite:", error);
};

// 2. Démarrage du serveur API avec le worker
await startSQLiteApiServer(apiPort, worker);

// 3. Premier refresh au démarrage
console.log("🔄 Premier refresh au démarrage...");
worker.postMessage({ type: "refresh:start" });

// 4. Refresh périodique journalier
setInterval(() => {
  console.log("⏰ Refresh périodique déclenché");
  worker.postMessage({ type: "refresh:start" });
}, refreshInterval * 1000);

console.log(`⏰ Refresh programmé toutes les ${refreshInterval/3600} heures`);
console.log(`✅ Service SQLite complet démarré !`);
console.log(`📊 Base de données: data/aircache.db`);
console.log(`📎 Attachments: ${process.env.STORAGE_PATH || './data/attachments'}`);

// Gestion gracieuse de l'arrêt
process.on('SIGINT', async () => {
  console.log('\n🛑 Arrêt gracieux...');

  try {
    worker.terminate();
    const { sqliteService } = await import("./src/lib/sqlite/index");
    await sqliteService.close();
    console.log('✅ Service arrêté proprement');
    process.exit(0);
  } catch (error) {
    console.error('❌ Erreur lors de l\'arrêt:', error);
    process.exit(1);
  }
});

process.on('SIGTERM', async () => {
  console.log('\n🛑 Arrêt demandé...');

  try {
    worker.terminate();
    const { sqliteService } = await import("./src/lib/sqlite/index");
    await sqliteService.close();
    console.log('✅ Service arrêté proprement');
    process.exit(0);
  } catch (error) {
    console.error('❌ Erreur lors de l\'arrêt:', error);
    process.exit(1);
  }
});
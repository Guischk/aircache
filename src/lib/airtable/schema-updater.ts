/**
 * Updater simple pour le sch√©ma Airtable
 * Ex√©cute la commande airtable-types-gen avec gestion d'erreurs basique
 */

/**
 * Met √† jour le sch√©ma Airtable en ex√©cutant airtable-types-gen
 * @returns Promise<boolean> - true si succ√®s, false si √©chec
 */
export async function updateAirtableSchema(): Promise<boolean> {
  try {
    console.log("üîÑ D√©but mise √† jour du sch√©ma Airtable...");

    // Ex√©cution de la commande airtable-types-gen
    const result = await Bun.$`bun run airtable:types`.quiet();

    if (result.exitCode === 0) {
      console.log("‚úÖ Sch√©ma Airtable mis √† jour avec succ√®s");
      return true;
    } else {
      console.error("‚ùå √âchec de la mise √† jour du sch√©ma Airtable");
      console.error("Stdout:", result.stdout.toString());
      console.error("Stderr:", result.stderr.toString());
      return false;
    }

  } catch (error) {
    console.error("‚ùå Erreur lors de la mise √† jour du sch√©ma:", error);
    return false;
  }
}

/**
 * Met √† jour le sch√©ma de mani√®re conditionnelle avec retry
 * @param maxRetries - Nombre maximum de tentatives (d√©faut: 2)
 * @returns Promise<boolean> - true si succ√®s, false si √©chec d√©finitif
 */
export async function updateSchemaWithRetry(maxRetries: number = 2): Promise<boolean> {
  let attempts = 0;

  while (attempts < maxRetries) {
    attempts++;

    console.log(`üì° Tentative ${attempts}/${maxRetries} de mise √† jour du sch√©ma`);

    const success = await updateAirtableSchema();

    if (success) {
      return true;
    }

    if (attempts < maxRetries) {
      console.log(`‚è∏Ô∏è Attente 3s avant retry...`);
      await Bun.sleep(3000);
    }
  }

  console.error(`‚ùå √âchec d√©finitif apr√®s ${maxRetries} tentatives`);
  return false;
}

/**
 * V√©rifie si le sch√©ma existe et est accessible
 * @returns Promise<boolean> - true si le sch√©ma est OK
 */
export async function validateSchema(): Promise<boolean> {
  try {
    // Tentative d'import du sch√©ma pour v√©rifier qu'il est valide
    await import("./schema.ts");
    console.log("‚úÖ Sch√©ma Airtable valid√©");
    return true;
  } catch (error) {
    console.error("‚ùå Erreur de validation du sch√©ma:", error);
    return false;
  }
}